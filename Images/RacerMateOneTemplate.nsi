/** ";Process with Rebol from a template" **/
; Script generated by the HM NIS Edit Script Wizard.
!include WordFunc.nsh
!insertmacro VersionCompare
!include LogicLib.nsh

; !define TESTRUN
/** CheckVersion **/

; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "RacerMateOne"
!define PRODUCT_VERSION "/**version**/"
!define PRODUCT_PUBLISHER "RacerMate Inc."
!define PRODUCT_WEB_SITE "http://www.racermateinc.com"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\RacerMateOne.exe"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_KEY2 "Software\Microsoft\Windows\CurrentVersion\Uninstall\{019B0015-35DB-4162-A1D1-C12321B997F8}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

; MUI 1.67 compatible ------
!include "MUI2.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "RM1.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"
!ifdef TESTRUN 
!define MUI_FINISHPAGE_NOAUTOCLOSE
!endif

; Welcome page
!insertmacro MUI_PAGE_WELCOME
!ifndef PATCHBUILD
; License page
!insertmacro MUI_PAGE_LICENSE "license.txt"
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
!endif
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
; !define MUI_FINISHPAGE_RUN "$INSTDIR\RacerMateOne.exe"
; !ifndef PATCHBUILD
!define MUI_FINISHPAGE_SHOWREADME "$INSTDIR\ReadMe.txt"
; !endif
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; MUI end ------

Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
RequestExecutionLevel admin
OutFile "install.exe"

InstallDir "$PROGRAMFILES\RacerMate Inc\RacerMateOne"
; InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
InstallDirRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallLocation"
ShowInstDetails hide
ShowUnInstDetails hide
XPStyle on

; assign c volume root folder
Var /GLOBAL CROOT

Function .onInit

	DetailPrint ".onInit $INSTDIR"

    ; assign c volume root folder
    StrCpy $CROOT "C:"
    
    !insertmacro MUI_LANGDLL_DISPLAY
	File /oname=$PLUGINSDIR\splash.bmp "RM1.bmp"
 	;optional
; 	File /oname=$PLUGINSDIR\splash.wav "C:\myprog\sound.wav"
	splash::show 1000 $PLUGINSDIR\splash
	Pop $0 ; $0 has '1' if the user closed the splash screen early,
			; '0' if everything closed normally, and '-1' if some error occurred.

!ifdef PATCHBUILD ; Check only if Patching

    Var /GLOBAL baseversion
    IntOp $baseversion 0 + /** to-integer to-binary hexbaseversion **/
    ReadRegDWORD $0 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "BaseVersion"
    IfErrors baseerr 0
    IntCmp $0 $baseversion cont 0 0
    
baseerr: ; if here, baseversion does not match
    MessageBox MB_OK|MB_ICONSTOP "Sorry, this patch is not compatible with the current version installed" /SD IDOK
    Abort 
    
; If here, baseversion matches    
cont:  

!endif

FunctionEnd

; The "" makes the section hidden.
Section "" SecUninstallPrevious
    Call UninstallPrevious
SectionEnd

Function UninstallPrevious

!ifndef PATCHBUILD ; don't uninstall if patching and no checks for prerequisites

    ; if there is previous install, run uninstall of previous  install
    ReadRegStr $R0 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallLocation"
	DetailPrint "Previous InstallLocation $R0"
    StrCmp $R0 "" NoPrevious 0 ; RemovePrevious if $R0 not empty
        ExecWait '$R0\uninst.exe _?=$R0' $0
    	DetailPrint "$R0\uninst.exe returned $0"
        IfErrors 0 ContUninstall   ; error uninstall, ask the user if they want to continue install
        MessageBox MB_YESNO|MB_ICONQUESTION "Uninstall Failed. Continue install anyway?" /SD IDOK IDYES NoPrevious IDNO Err 
ContUninstall:
        IntCmp $0 2 Err    ; if uninstall was cancelled, the abort installation
            Delete "$R0\uninst.exe"
            RMDir "$R0"
NoPrevious:
	ExecWait 'MsiExec.exe /x{019B0015-35DB-4162-A1D1-C12321B997F8} /qn' $0
	DetailPrint "MsiExec.exe program returned $0"
!ifndef TESTRUN 
    ; this handles checks for prerequisites
	ExecWait '$EXEDIR\setup.exe INSTALLDIR="$INSTDIR" /qn' $0
	DetailPrint "Setup.exe program returned $0"
!endif    
    ClearErrors
    Return ; uninstall done
    
; Abort or uninstall failed    
Err:
    MessageBox MB_OK|MB_ICONSTOP "Aborting installation." /SD IDOK
    Abort
    
!endif

FunctionEnd ;UninstallPrevious

; Var InstallDotNET
; Function .onInit
;   !insertmacro MUI_LANGDLL_DISPLAY
;    
;   ; Check .NET version
;   StrCpy $InstallDotNET "No"
;   Call GetDotNETVersion
;   Pop $0
;    
;   ${If} $0 == "not found"
;         StrCpy $InstallDotNET "Yes"
;     MessageBox MB_OK|MB_ICONINFORMATION "${PRODUCT_NAME} requires that the .NET Framework 2.0 is installed. The .NET Framework will be downloaded and installed automatically during installation of ${PRODUCT_NAME}."
;     Return
;   ${EndIf}
;  
;   StrCpy $0 $0 "" 1 # skip "v"
;  
;   ${VersionCompare} $0 "2.0" $1
;   ${If} $1 == 2
;         StrCpy $InstallDotNET "Yes"
;     MessageBox MB_OK|MB_ICONINFORMATION "${PRODUCT_NAME} requires that the .NET Framework 2.0 is installed. The .NET Framework will be downloaded and installed automatically during installation of ${PRODUCT_NAME}."
;     Return
;   ${EndIf}
; FunctionEnd
;  
; Function GetDotNETVersion
;     Push $0
;     Push $1
;  
;     System::Call "mscoree::GetCORVersion(w .r0, i ${NSIS_MAX_STRLEN}, *i) i .r1"
;     StrCmp $1 "error" 0 +2
;     StrCpy $0 "not found"
;  
;     Pop $1
;     Exch $0
; FunctionEnd

Function FilesRemove
/** FilesRemove **/
FunctionEnd ;FilesRemove

Function FoldersRemove
/** FoldersRemove **/
FunctionEnd ;FoldersRemove

Function FoldersAdd
/** FoldersAdd **/
FunctionEnd ;FoldersAdd

; Function UserFilesRemove
; /** UserFilesRemove **/
; FunctionEnd ;UserFilesRemove

; Function UserFoldersRemove
; /** UserFoldersRemove **/
; FunctionEnd ;UserFoldersRemove

; Function UserFoldersAdd
; /** UserFoldersAdd **/
; FunctionEnd ;UserFoldersAdd

Function RCVFilesRemove
/** RCVFilesRemove **/
FunctionEnd ;RCVFilesRemove

Function RCVFoldersRemove
/** RCVFoldersRemove **/
FunctionEnd ;RCVFoldersRemove

Function RCVFoldersAdd
/** RCVFoldersAdd **/
FunctionEnd ;RCVFoldersAdd

; Shared functions
!macro SHAREDFUNC un

Function ${un}RemovePrevious
    Pop $0  ; use this location to actually remove files from
/** RemovePrevious **/
    Delete "$0\${PRODUCT_NAME}.url"
    Delete "$0\uninst.exe"
    RMDir "$0"
    ClearErrors
    
FunctionEnd ;${un}RemovePrevious

!macroend

; !insertmacro SHAREDFUNC ""
!insertmacro SHAREDFUNC "un."

Section "MainSection" SEC01
  SetOutPath "$INSTDIR"
  SetOverwrite on
  
	SetShellVarContext all
	DetailPrint "MainSection $INSTDIR"

	Call FilesRemove
	Call FoldersRemove
	Call FoldersAdd
/** FilesAdd **/
    
; 	Call UserFilesRemove
; 	Call UserFoldersRemove
; 	Call UserFoldersAdd
; /** UserFilesAdd **/

	Call RCVFilesRemove
	Call RCVFoldersRemove
	Call RCVFoldersAdd
/** RCVFilesAdd **/

    SetOutPath "$INSTDIR" ; needed to make sure the shortcuts uses this as the default folder
  CreateDirectory "$SMPROGRAMS\RacerMateOne"
  CreateShortCut "$SMPROGRAMS\RacerMateOne\RacerMate One.lnk" "$INSTDIR\RacerMateOne.exe"
  CreateShortCut "$DESKTOP\RacerMate One.lnk" "$INSTDIR\RacerMateOne.exe"
  
  ; delete Windows installer entry to keep only one (NSIS) installed entry
  DeleteRegKey HKLM "${PRODUCT_UNINST_KEY2}"
SectionEnd

Section -AdditionalIcons
    SetOutPath "$INSTDIR" ; needed to make sure the shortcuts uses this as the default folder
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
;   CreateShortCut "$SMPROGRAMS\RacerMateOne\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  CreateShortCut "$SMPROGRAMS\RacerMateOne\Uninstall RacerMate One.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\RacerMateOne.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name) (Remove Only)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\RacerMateOne.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "BaseVersion" "${PRODUCT_VERSION}"
  
    WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallLocation" "$INSTDIR"
    WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Version" /** to-integer to-binary hexversion **/
    WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "BaseVersion" /** to-integer to-binary hexbaseversion **/
    WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoModify" 1
    WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoRepair" 1
SectionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer." /SD IDOK
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" /SD IDYES IDYES +2
  Abort
FunctionEnd

Section Uninstall
	SetShellVarContext all
	SetOutPath $TEMP
	DetailPrint "Uninstall $INSTDIR"
    
    Push $INSTDIR
	Call un.RemovePrevious
    
  Delete "$SMPROGRAMS\RacerMateOne\Uninstall RacerMate One.lnk"
;   Delete "$SMPROGRAMS\RacerMateOne\Website.lnk"
  Delete "$SMPROGRAMS\RacerMateOne\RacerMate One.lnk"
  Delete "$DESKTOP\RacerMate One.lnk"

  RMDir "$SMPROGRAMS\RacerMateOne"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  
	ExecWait 'MsiExec.exe /x{019B0015-35DB-4162-A1D1-C12321B997F8} /qn' $0
	DetailPrint "MsiExec.exe program returned $0"
  
  SetAutoClose true
SectionEnd